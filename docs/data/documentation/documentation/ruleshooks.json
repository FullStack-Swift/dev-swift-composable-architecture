{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to take advantage of the wonderful interface of Hooks, the same rules that React hooks has must also be followed by SwiftUI Hooks."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"[Disclaimer]: These rules are not technical constraints specific to SwiftUI Hooks, but are necessary based on the design of the Hooks itself. You can see here to know more about the rules defined for React Hooks."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In -Onone builds, if a violation against this rules is detected, it asserts by an internal sanity check to help the developer notice the mistake in the use of hooks. However, hooks also has disableHooksRulesAssertion modifier in case you want to disable the assertions."}]}]}]},{"anchor":"Only-Call-Hooks-at-the-Function-Top-Level","level":3,"type":"heading","text":"Only Call Hooks at the Function Top Level"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Do not call Hooks inside conditions or loops. The order in which hook is called is important since Hooks uses LinkedList to keep track of its state."}]},{"type":"codeListing","syntax":"swift","code":["@ViewBuilder","func counterButton() -> some View {","  let count = useState(0)  \/\/ 游릭 Uses hook at the top level","","  Button(\"You clicked \\(count.wrappedValue) times\") {","    count.wrappedValue += 1","  }","}"]},{"type":"codeListing","syntax":"swift","code":["@ViewBuilder","func counterButton() -> some View {","  if condition {","    let count = useState(0)  \/\/ 游댮 Uses hook inside condition.","","    Button(\"You clicked \\(count.wrappedValue) times\") {","      count.wrappedValue += 1","    }","  }","}"]},{"anchor":"Only-Call-Hooks-from-HookScope-or-HookViewhookBody","level":3,"type":"heading","text":"Only Call Hooks from HookScope or HookView.hookBody"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to preserve the state, hooks must be called inside a HookScope."},{"type":"text","text":" "},{"type":"text","text":"A view that conforms to the HookView protocol will automatically be enclosed in a HookScope."}]},{"type":"codeListing","syntax":"swift","code":["struct CounterButton: HookView {  \/\/ 游릭 `HookView` is used.","  var hookBody: some View {","    let count = useState(0)","","    Button(\"You clicked \\(count.wrappedValue) times\") {","      count.wrappedValue += 1","    }","  }","}",""]},{"type":"codeListing","syntax":"swift","code":["func counterButton() -> some View {","  HookScope {  \/\/ 游릭 `HookScope` is used.","    let count = useState(0)","","    Button(\"You clicked \\(count.wrappedValue) times\") {","      count.wrappedValue += 1","    }","  }","}"]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: HookView {","  var hookBody: some View {","    counterButton()","  }","","\/\/ 游릭 Called from `HookView.hookBody` or `HookScope`.","  @ViewBuilder","  var counterButton: some View {","    let count = useState(0)","","    Button(\"You clicked \\(count.wrappedValue) times\") {","      count.wrappedValue += 1","    }","  }","}"]},{"type":"codeListing","syntax":"swift","code":["\/\/ 游댮 Neither `HookScope` nor `HookView` is used, and is not called from them.","@ViewBuilder","func counterButton() -> some View {","  let count = useState(0)","","  Button(\"You clicked \\(count.wrappedValue) times\") {","    count.wrappedValue += 1","  }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/documentation\/ruleshooks"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Documentation\/documentation\/Documentation\/RulesHooks","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A SwiftUI implementation of React Hooks. Enhances reusability of stateful logic and gives state and lifecycle to function view."}],"kind":"article","metadata":{"roleHeading":"Article","title":"RulesHooks","role":"article","modules":[{"name":"Documentation"}]},"hierarchy":{"paths":[["doc:\/\/Documentation\/documentation\/Documentation"]]},"references":{"doc://Documentation/documentation/Documentation":{"role":"collection","title":"Documentation","abstract":[{"type":"text","text":"A SwiftUI implementation of React Hooks. Enhances reusability of stateful logic and gives state and lifecycle to function view."}],"identifier":"doc:\/\/Documentation\/documentation\/Documentation","kind":"symbol","type":"topic","url":"\/documentation\/documentation"}}}