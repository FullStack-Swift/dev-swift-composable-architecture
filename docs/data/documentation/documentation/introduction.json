{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI Hooks is a SwiftUI implementation of React Hooks. Brings the state and lifecycle into the function view, without depending on elements that are only allowed to be used in struct views such as @State or @ObservedObject."},{"type":"text","text":" "},{"type":"text","text":"It allows you to reuse stateful logic between views by building custom hooks composed with multiple hooks."},{"type":"text","text":" "},{"type":"text","text":"Furthermore, hooks such as useEffect also solve the problem of lack of lifecycles in SwiftUI."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The API and behavioral specs of SwiftUI Hooks are entirely based on React Hooks, so you can leverage your knowledge of web applications to your advantage."}]},{"anchor":"Examples","level":3,"type":"heading","text":"Examples"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Basic Hooks"}]},{"type":"codeListing","syntax":"swift","code":["","func timer() -> some View {","  HookScope {","","    let time = useState(Date())","","    useEffect(.once) {","      let timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) {","        time.wrappedValue = $0.fireDate","      }","","      return {","        timer.invalidate()","      }","    }","","    return Text(\"Time: \\(time.wrappedValue)\")","  }","}"]},{"type":"codeListing","syntax":"swift","code":["var contentOther: some View {","  HookScope {","","    let state = useState(0)","","    let otherState = useState {","      0","    }","","    let toggle = useState(false)","","    let _ = useLogger(nil, toggle.wrappedValue)","","    let _ = useLogger(.preserved(by: toggle.wrappedValue), toggle.wrappedValue)","","    VStack {","      Stepper(value: state) {","        Text(state.wrappedValue.description)","      }","","      Stepper(value: otherState) {","        Text(otherState.wrappedValue.description)","      }","","      Toggle(\"\", isOn: toggle)","        .toggleStyle(.switch)","    }","  }","}",""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Advance Hooks"}]},{"type":"codeListing","syntax":"swift","code":["","var content: some View {","  HookScope {","","    @HState var state = 0","","    @HState<Int> var otherState = {","      0","    }","","    @HState var toggle = false","","    @HLogger","    var log = toggle","","    @HLogger(.preserved(by: toggle))","    var otherLog = toggle","","    VStack {","      Stepper(value: $state) {","        Text(state.description)","      }","","      Stepper(value: $otherState) {","        Text(otherState.description)","      }","","      Toggle(\"\", isOn: $toggle)","        .toggleStyle(.switch)","      }","  }","}",""]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/documentation\/introduction"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Documentation\/documentation\/Documentation\/Introduction","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A SwiftUI implementation of React Hooks. Enhances reusability of stateful logic and gives state and lifecycle to function view."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Introduction","role":"article","modules":[{"name":"Documentation"}]},"hierarchy":{"paths":[["doc:\/\/Documentation\/documentation\/Documentation"]]},"references":{"doc://Documentation/documentation/Documentation":{"role":"collection","title":"Documentation","abstract":[{"type":"text","text":"A SwiftUI implementation of React Hooks. Enhances reusability of stateful logic and gives state and lifecycle to function view."}],"identifier":"doc:\/\/Documentation\/documentation\/Documentation","kind":"symbol","type":"topic","url":"\/documentation\/documentation"}}}